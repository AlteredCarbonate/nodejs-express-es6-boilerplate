{"version":3,"sources":["../src/app.es6"],"names":["logger","console","log","app","info","anything","error","number","use","req","res","next","header","json","urlencoded","extended","static","join","__dirname","err","Error","status","get","render","message","server","listen","address","port"],"mappings":"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","file":"app.js","sourcesContent":["\"use strict\";\r\nimport express from 'express';\r\nimport path from 'path';\r\nimport morgan from 'morgan';\r\nimport cookieParser from 'cookie-parser';\r\nimport bodyParser from 'body-parser';\r\nimport cors from 'cors';\r\n//-----------------------------------------------\r\nimport Logger from './helpers/winston-logger';\r\nimport routes from './routes/index';\r\nimport users from './routes/users'\r\n\r\n//using let\r\nlet logger = new Logger();\r\nconsole.log(logger);\r\nlet app = express();\r\n\r\n/*\r\n * Sample way to use winston info and error logger. Info logger comes below error access level so it will have all your information + errors.\r\n * { error: 0, warn: 1, info: 2, verbose: 3, debug: 4, silly: 5 }\r\n * @private\r\n */\r\nlogger.info('Hello logger');\r\nlogger.info('Hello Info', {\r\n    anything: 'this is metdata'\r\n});\r\nlogger.error('errorlog', 'Hello Error');\r\nlogger.info('Hello Info', {\r\n    anything: 'this is metdata'\r\n});\r\nlogger.log('info', 'test message %s', 'my string'); // info: test message my string\r\nlogger.log('info', 'test message %d', 123); // info: test message 123\r\nlogger.log('info', 'test message %j', {\r\n    number: 123\r\n}, {}); // info: test message {\"number\":123} & meta = {}\r\nlogger.log('info', 'test message %s, %s', 'first', 'second', {\r\n    number: 123\r\n}); // info: test message first, second & meta = {number: 123}\r\nlogger.log('info', 'test message', 'first', 'second', {\r\n    number: 123\r\n}); // info: test message first second &  meta = {number: 123}\r\nlogger.log('info', 'test message %s, %s', 'first', 'second', {\r\n    number: 123\r\n}, function() {}); // info: test message first, second &  meta = {number: 123} with callback = function(){}\r\nlogger.log('info', 'test message', 'first', 'second', {\r\n    number: 123\r\n}, function() {}); // info: test message first second & meta = {number: 123} with callback = function(){}\r\n/* END of winston Logger examples */\r\n\r\n\r\n// General Express and Node API Settings - configure CORS for local dev\r\napp.use(function(req, res, next) {\r\n    res.header('Access-Control-Allow-Origin', '*');\r\n    res.header('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Authorization');\r\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,PATCH,POST,DELETE,OPTIONS');\r\n    next();\r\n});\r\napp.use(cors());\r\napp.use(morgan('dev'));\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({\r\n    extended: true\r\n}));\r\napp.use(cookieParser());\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n//Settings END\r\n\r\napp.use('/', routes);\r\napp.use('/users', users);\r\n\r\n// using arrow syntax for general API not found\r\napp.use((req, res, next) => {\r\n    let err = new Error('Not Found');\r\n    err.status = 404;\r\n    next(err);\r\n});\r\n\r\nif (app.get('env') === 'development') {\r\n    app.use((err, req, res, next) => {\r\n        res.status(err.status || 500);\r\n        res.render('error', {\r\n            message: err.message,\r\n            error: err\r\n        });\r\n    });\r\n}\r\n\r\napp.use((err, req, res, next) => {\r\n    res.status(err.status || 500);\r\n    res.render('error', {\r\n        message: err.message,\r\n        error: {}\r\n    });\r\n});\r\n\r\n\r\n//module.exports = app;\r\n// arrow functions\r\nconst server = app.listen(3000, () => {\r\n    // destructuring\r\n    const {\r\n        address,\r\n        port\r\n    } = server.address();\r\n\r\n    // string interpolation:\r\n    console.log(`Example app listening at http://${address}:${port}`);\r\n});\r\n"]}