{"version":3,"sources":["../src/app.es6"],"names":["app","use","req","res","next","header","json","urlencoded","extended","static","join","__dirname","err","Error","status","get","render","message","error","server","listen","address","port","console","log"],"mappings":"AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAIA,MAAM,wBAAV;;AAEA;AACAA,IAAIC,GAAJ,CAAQ,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAChCD,QAAIE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAF,QAAIE,MAAJ,CAAW,8BAAX,EAA2C,+CAA3C;AACAF,QAAIE,MAAJ,CAAW,8BAAX,EAA2C,mCAA3C;AACAD;AACD,CALD;AAMAJ,IAAIC,GAAJ,CAAQ,qBAAR;;AAEAD,IAAIC,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAD,IAAIC,GAAJ,CAAQ,qBAAWK,IAAX,EAAR;AACAN,IAAIC,GAAJ,CAAQ,qBAAWM,UAAX,CAAsB;AAC1BC,cAAU;AADgB,CAAtB,CAAR;AAGAR,IAAIC,GAAJ,CAAQ,6BAAR;AACAD,IAAIC,GAAJ,CAAQ,kBAAQQ,MAAR,CAAe,eAAKC,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAR;AACA;AACA;AACA;AACA;;AAEAX,IAAIC,GAAJ,CAAQ,GAAR;AACAD,IAAIC,GAAJ,CAAQ,QAAR;;AAEA;AACAD,IAAIC,GAAJ,CAAQ,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxB,QAAIQ,MAAM,IAAIC,KAAJ,CAAU,WAAV,CAAV;AACAD,QAAIE,MAAJ,GAAa,GAAb;AACAV,SAAKQ,GAAL;AACH,CAJD;;AAMA,IAAIZ,IAAIe,GAAJ,CAAQ,KAAR,MAAmB,aAAvB,EAAsC;AAClCf,QAAIC,GAAJ,CAAQ,UAACW,GAAD,EAAMV,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC7BD,YAAIW,MAAJ,CAAWF,IAAIE,MAAJ,IAAc,GAAzB;AACAX,YAAIa,MAAJ,CAAW,OAAX,EAAoB;AAChBC,qBAASL,IAAIK,OADG;AAEhBC,mBAAON;AAFS,SAApB;AAIH,KAND;AAOH;;AAEDZ,IAAIC,GAAJ,CAAQ,UAACW,GAAD,EAAMV,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC7BD,QAAIW,MAAJ,CAAWF,IAAIE,MAAJ,IAAc,GAAzB;AACAX,QAAIa,MAAJ,CAAW,OAAX,EAAoB;AAChBC,iBAASL,IAAIK,OADG;AAEhBC,eAAO;AAFS,KAApB;AAIH,CAND;;AASA;AACA;AACA,IAAMC,SAASnB,IAAIoB,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACrC;AADqC,0BAEZD,OAAOE,OAAP,EAFY;;AAAA,QAE7BA,OAF6B,mBAE7BA,OAF6B;AAAA,QAEpBC,IAFoB,mBAEpBA,IAFoB;;AAIpC;;AACAC,YAAQC,GAAR,sCAA+CH,OAA/C,SAA0DC,IAA1D;AACD,CANc,CAAf","file":"app.js","sourcesContent":["\"use strict\";\r\nimport express from 'express';\r\nimport path from 'path';\r\nimport logger from 'morgan';\r\nimport cookieParser from 'cookie-parser';\r\nimport bodyParser from 'body-parser';\r\nimport cors from 'cors';\r\nimport routes from './routes/index';\r\nimport users from './routes/users'\r\n\r\n//using let\r\nlet app = express();\r\n\r\n// configure CORS for local dev\r\napp.use(function (req, res, next) {\r\n  res.header('Access-Control-Allow-Origin', '*');\r\n  res.header('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Authorization');\r\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,PATCH,POST,DELETE,OPTIONS');\r\n  next();\r\n});\r\napp.use(cors());\r\n\r\napp.use(logger('dev'));\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({\r\n    extended: true\r\n}));\r\napp.use(cookieParser());\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n//\r\n// app.use('/',(req,res)=>{\r\n//   res.json(\"Hello from ES6\");\r\n// })\r\n\r\napp.use('/', routes);\r\napp.use('/users', users);\r\n\r\n// using arrow syntax\r\napp.use((req, res, next) => {\r\n    let err = new Error('Not Found');\r\n    err.status = 404;\r\n    next(err);\r\n});\r\n\r\nif (app.get('env') === 'development') {\r\n    app.use((err, req, res, next) => {\r\n        res.status(err.status || 500);\r\n        res.render('error', {\r\n            message: err.message,\r\n            error: err\r\n        });\r\n    });\r\n}\r\n\r\napp.use((err, req, res, next) => {\r\n    res.status(err.status || 500);\r\n    res.render('error', {\r\n        message: err.message,\r\n        error: {}\r\n    });\r\n});\r\n\r\n\r\n//module.exports = app;\r\n// arrow functions\r\nconst server = app.listen(3000, () => {\r\n\t// destructuring\r\n  const {address, port} = server.address();\r\n\r\n  // string interpolation:\r\n  console.log(`Example app listening at http://${address}:${port}`);\r\n});\r\n"]}